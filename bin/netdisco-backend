#!/usr/bin/env perl

use strict;
use warnings;

# 声明全局变量 $home 用于存储 Netdisco 主目录
our $home;

BEGIN {
  use FindBin;
  FindBin::again();

  # 获取当前脚本的完整路径和用户ID
  my $me = File::Spec->catfile($FindBin::RealBin, $FindBin::RealScript);
  my $uid = (stat($me))[4] || 0;

  # 设置 Netdisco 主目录，优先级：NETDISCO_HOME > 用户主目录 > HOME
  $home = ($ENV{NETDISCO_HOME} || (getpwuid($uid))[7] || $ENV{HOME});

  # 尝试查找 localenv 脚本，如果不存在 PERL_LOCAL_LIB_ROOT 环境变量
  if (!exists $ENV{PERL_LOCAL_LIB_ROOT}) {
      use File::Spec;
      # 首先在 bin 目录中查找 localenv
      my $localenv = File::Spec->catfile($FindBin::Bin, 'localenv');
      exec($localenv, $0, @ARGV) if -f $localenv;
      # 然后在用户目录中查找 localenv
      $localenv = File::Spec->catfile($home, 'perl5', 'bin', 'localenv');
      exec($localenv, $0, @ARGV) if -f $localenv;

      # 如果找不到 localenv 且没有 PERLBREW_PERL 环境变量，则退出
      die "Sorry, can't find libs required for App::Netdisco.\n"
        if !exists $ENV{PERLBREW_PERL};
  }
}

BEGIN {
  use Path::Class;

  # 将有用的库路径添加到 @INC 和 $PATH 中
  unshift @INC,
    dir($FindBin::RealBin)->parent->subdir('lib')->stringify,
    dir($FindBin::RealBin, 'lib')->stringify;

  # 将 bin 目录添加到 PATH 环境变量中
  use Config;
  $ENV{PATH} = $FindBin::RealBin . $Config{path_sep} . $ENV{PATH};
}

# 导入守护进程控制、文件系统监控和文件操作模块
use Daemon::Control;
use Filesys::Notify::Simple;
use File::Copy;

# 配置命令行参数解析
use Getopt::Long;
Getopt::Long::Configure ("pass_through");

# 设置日志文件数量和大小参数
my ($logfiles, $logsize) = (8,10);
my $result = GetOptions(
  'logfiles=i' => \$logfiles,
  'logsize=i'  => \$logsize,
);

# 导入 Netdisco 环境模块并确定配置文件
use App::Netdisco::Environment;
my $config = ($ENV{PLACK_ENV} || $ENV{DANCER_ENVIRONMENT}) .'.yml';

# 确保配置文件存在，如果不存在则从模板复制
my $template_config = file($ENV{DANCER_CONFDIR}, 'environments', $config);
my $app_config = file($ENV{DANCER_ENVDIR}, $config);
if (! -e $app_config and -e $template_config) {
  copy $template_config, $app_config;
}
if (! -e $app_config) {
  die "error: cannot find Netdisco config at $template_config or $app_config\n";
}

# 设置后端程序路径和参数
my $netdisco = file($FindBin::RealBin, 'netdisco-backend-fg');
my @args = (scalar @ARGV > 1 ? @ARGV[1 .. $#ARGV] : ());

# 创建日志目录和日志文件
my $log_dir = dir($home, 'logs');
mkdir $log_dir if ! -d $log_dir;
my $log_file = file($log_dir, 'netdisco-backend.log');

# 获取后端程序的用户ID和组ID
my $uid = (stat($netdisco->stringify))[4] || 0;
my $gid = (stat($netdisco->stringify))[5] || 0;

# 处理旧的PID文件，将其重命名为新的PID文件名
my $old_pid = file($home, 'netdisco-daemon.pid');
my $new_pid = file($home, 'netdisco-backend.pid');
if (-f $old_pid) { File::Copy::move( $old_pid, $new_pid ) }

# 创建守护进程控制器
Daemon::Control->new({
  name => 'Netdisco Backend',
  program  => \&restarter,
  program_args => [@args],
  pid_file => $new_pid,
  stderr_file => $log_file,
  stdout_file => $log_file,
  redirect_before_fork => 0,
  uid => $uid, gid => $gid,
})->run;

# 重启器逻辑（借鉴自 Plack::Loader::Restarter - 非常感谢！！）
my $child = 0;

# 重启器子程序，负责监控配置文件变化并重启后端进程
sub restarter {
  my ($daemon, @program_args) = @_;
  $0 = 'netdisco-backend';
  $child = fork_and_start($daemon, @program_args);
  exit(1) unless $child;

  # 创建文件系统监控器，监控配置目录和日志目录
  my $watcher = Filesys::Notify::Simple->new([$ENV{DANCER_ENVDIR}, $log_dir]);
  warn "config watcher: watching $ENV{DANCER_ENVDIR} for updates.\n";

  # 设置信号处理器
  local $SIG{TERM} = sub { $child = signal_child('TERM', $child); exit(0); };

  # 主监控循环
  while (1) {
      my @restart;

      # 阻塞等待文件变化事件
      $watcher->wait(sub {
          my @events = @_;
          # 只关注日志文件或配置文件的变化
          @events = grep {$_->{path} eq $log_file or
                          file($_->{path})->basename eq $config} @events;
          return unless @events;
          @restart = @events;
      });

      my ($hupit, $rotate) = (0, 0);
      next unless @restart;

      # 处理文件变化事件
      foreach my $f (@restart) {
          if ($f->{path} eq $log_file) {
              ++$rotate;  # 日志文件变化，需要轮转日志
          }
          else {
              warn "-- $f->{path} updated.\n";
              ++$hupit;   # 配置文件变化，需要重启进程
          }
      }
      # 根据事件类型执行相应操作
      $child = rotate_logs($child, $daemon, @program_args) if $rotate;
      if ($hupit) {
          signal_child('TERM', $child);
          $child = fork_and_start($daemon, @program_args);
          exit(1) unless $child;
      }
  }
}

# 创建子进程并启动后端程序
sub fork_and_start {
  my ($daemon, @daemon_args) = @_;
  my $pid = fork;
  die "Can't fork: $!" unless defined $pid;

  if ($pid == 0) { # 子进程
      $daemon->redirect_filehandles;
      exec( $netdisco->stringify, @daemon_args );
  }
  else {
      return $pid;
  }
}

# 向子进程发送信号
sub signal_child {
  my ($signal, $pid) = @_;
  return unless $signal and $pid;
  warn "config watcher: sending $signal to the server (pid:$pid)...\n";
  kill $signal => $pid;
  waitpid($pid, 0);
}

# 轮转日志文件
sub rotate_logs {
  my $child = shift;
  # 检查日志文件是否存在且超过指定大小
  return $child unless (-f $log_file) and
    ((-s $log_file) > ($logsize * 1024768));

  # 获取所有现有的日志轮转文件
  my @files = grep { /$log_file\.\d+/ } glob file($log_dir, '*');
  # 按文件名倒序排列，处理日志轮转
  foreach my $f (sort { $b cmp $a } @files) {
      next unless $f =~ m/$log_file\.(\d+)$/;
      my $pos = $1;
      # 删除最旧的日志文件
      unlink $f if $pos == ($logfiles - 1);
      my $next = $pos + 1;
      (my $newf = $f) =~ s/\.$pos$/.$next/;
      rename $f, $newf;
  }

  # 如果日志文件超过 12MB，则重命名并重启进程
  # 这样可以避免在复制/截断过程中的竞争条件导致数据丢失
  if ((-s $log_file) > (12 * 1024768)) {
      rename $log_file, $log_file .'.1';
      signal_child('TERM', $child);
      $child = fork_and_start(@_);
      if ($child){
        return $child;
      }else{
        exit(1);
      }
  } else {
      # 否则复制当前日志文件并截断原文件
      copy $log_file, $log_file .'.1';
      truncate $log_file, 0;
      return $child;
  }
}

=head1 NAME

netdisco-backend - Job Control Daemon for Netdisco

=head1 SEE ALSO

=over 4

=item *

L<App::Netdisco>

=back

=cut
