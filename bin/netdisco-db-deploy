#!/usr/bin/env perl

use strict;
use warnings;

# 声明全局变量 $home 用于存储 Netdisco 主目录
our $home;

BEGIN {
  use FindBin;
  FindBin::again();

  # 设置 Netdisco 主目录，优先使用环境变量 NETDISCO_HOME，否则使用 HOME
  $home = ($ENV{NETDISCO_HOME} || $ENV{HOME});

  # 尝试查找 localenv 脚本，如果不存在 PERL_LOCAL_LIB_ROOT 环境变量
  if (!exists $ENV{PERL_LOCAL_LIB_ROOT}) {
      use File::Spec;
      # 首先在脚本目录中查找 localenv
      my $localenv = File::Spec->catfile($FindBin::RealBin, 'localenv');
      exec($localenv, $0, @ARGV) if -f $localenv;
      # 然后在用户目录中查找 localenv
      $localenv = File::Spec->catfile($home, 'perl5', 'bin', 'localenv');
      exec($localenv, $0, @ARGV) if -f $localenv;

      # 如果找不到 localenv 且没有 PERLBREW_PERL 环境变量，则退出
      die "Sorry, can't find libs required for App::Netdisco.\n"
        if !exists $ENV{PERLBREW_PERL};
  }
}

BEGIN {
  use Path::Class;

  # 将有用的库路径添加到 @INC 和 $PATH 中
  unshift @INC,
    dir($FindBin::RealBin)->parent->subdir('lib')->stringify,
    dir($FindBin::RealBin, 'lib')->stringify;

  # 将 bin 目录添加到 PATH 环境变量中
  use Config;
  $ENV{PATH} = $FindBin::RealBin . $Config{path_sep} . $ENV{PATH};
}

# 导入 Netdisco 应用和 Dancer 框架
use App::Netdisco;
use Dancer ':script';
use Dancer::Plugin::DBIC 'schema';

# 导入异常处理模块
use Try::Tiny;

=head1 NAME

netdisco-db-deploy - Database deployment for Netdisco

=head1 USAGE

This script upgrades or initialises a Netdisco database schema.

 ~/bin/netdisco-db-deploy [--redeploy-all]

This script connects to the database and runs without user interaction. If
there's no Nedisco schema, it is deployed. If there's an unversioned schema
then versioning is added, and updates applied.  Otherwise only necessary
updates are applied to an already versioned schema.

Pre-existing requirements are that there's a working database connection and a
user with rights to create tables in that database. These settings are defined
in your environment YAML file (default C<~/environments/deployment.yml>).

If you wish to force the redeployment of all database configuration, pass the
C<--redeploy-all> argument on the command line. This will reset your database
version so the database scripts will run again, but no data will be deleted
other than what's done via the upgrade scripts.

For more database info see the
L<netdisco wiki|https://github.com/netdisco/netdisco/wiki/Database-Tips>.

=head1 VERSIONS

=over 4

=item *

Version 1 is a completely empty database schema with no tables

=item *

Version 2 is the "classic" Netdisco database schema as of Netdisco 1.1

=item *

Versions 5 to 16 add patches for Netdisco 1.2

=item *

Version 17 onwards deploys schema upgrades for Netdisco 2

=back

=cut

# 获取数据库架构和 PostgreSQL 版本信息
my $schema = schema('netdisco');
my $pg_ver = $schema->storage->dbh->{pg_server_version};

# 检查 PostgreSQL 版本是否满足最低要求（9.6）
if ($pg_ver and $pg_ver < 90600) {
    printf "\nFATAL: minimum PostgreSQL version for Netdisco is 9.6, you have %s\n",
      (join '.', reverse map {scalar reverse} unpack("(A2)*", reverse $pg_ver));
    print "\nUnfortunately, if you are reading this, you already upgraded Netdisco,";
    print "\nso your only options now are to delete and reinstall Netdisco, or upgrade";
    print "\nyour PostgreSQL installation.\n";
    print "\nPlease always read the Release Notes before upgrading:";
    print "\nhttps://github.com/netdisco/netdisco/wiki/Release-Notes\n";
    die "\n";
}

# 如果指定了 --redeploy-all 参数，则删除版本表以强制重新部署
if (scalar @ARGV and $ARGV[0] and $ARGV[0] eq '--redeploy-all') {
    $schema->storage->dbh_do(
      sub {
        my ($storage, $dbh, @args) = @_;
        $dbh->do('DROP TABLE dbix_class_schema_versions');
      },
    );
}

# 如果数据库版本不存在，则安装版本 1（对应空架构）
if (not $schema->get_db_version) {
    $schema->install(1);
    $schema->storage->disconnect;
}

# 测试现有架构是否为公共发布版本，如果是则设置为版本 2
try {
    $schema->storage->dbh_do(sub {
      my ($storage, $dbh) = @_;
      $dbh->selectrow_arrayref("SELECT * FROM device WHERE 0 = 1");
    });

    $schema->_set_db_version({version => 2})
      if $schema->get_db_version == 1;
    $schema->storage->disconnect;
};

# 如果正在测试，则设置事务回滚保护
my $txn_guard = $ENV{ND2_DB_ROLLBACK}
  ? schema('netdisco')->storage->txn_scope_guard : undef;

# 从当前数据库版本升级到目标版本
# 注意：首次部署时 get_db_version 将为 0
my $db_version = ($schema->get_db_version || 1);
my $target_version = $schema->schema_version;

# 逐步升级，以防用户已经应用了本地更改
for (my $i = $db_version; $i < $target_version; $i++) {
    my $next = $i + 1;
    try {
        $schema->upgrade_single_step($i, $next);
    }
    catch {
        warn "Error: $_"
          if $_ !~ m/(does not exist|already exists)/;

        # 在 dbix_class_schema_versions 表中设置版本行
        $schema->_set_db_version({version => $next})
          if $schema->get_db_version < $next;
    };
}

# 如果设置了回滚标志，则取消事务保护
undef $txn_guard if $ENV{ND2_DB_ROLLBACK};
exit 0;
